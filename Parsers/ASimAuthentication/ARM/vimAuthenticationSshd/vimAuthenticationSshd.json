{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimAuthenticationSshd",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Authentication ASIM filtering parser for OpenSSH sshd",
            "category": "ASIM",
            "FunctionAlias": "vimAuthenticationSshd",
            "query": "let parser = (\n      starttime:datetime          = datetime(null), \n      endtime:datetime            = datetime(null),\n      targetusername_has:string   = \"*\", \n      disabled:bool               = false\n  ) {\n  let prefilter = (T:(SyslogMessage:string, TimeGenerated:datetime)) {\n      T\n      | where \n          (isnull(starttime)           or TimeGenerated >= starttime) \n          and (isnull(endtime)         or TimeGenerated <= endtime)\n          and (targetusername_has=='*' or (SyslogMessage has targetusername_has))\n  };\n  let SyslogProjects = Syslog | project TimeGenerated, Computer, SyslogMessage, ProcessName, ProcessID, HostIP, Type, _ItemId, _ResourceId, _SubscriptionId;\n  //\n  // -- Successful login\n  let SSHDAccepted=(disabled:bool=false) { \n      // -- Parse events with the format \"Accepted password for <User> from <IP address> port <port> ssh2\"\n      SyslogProjects | where not(disabled)\n          | where ProcessName == \"sshd\" and SyslogMessage startswith 'Accepted'\n          | invoke prefilter()\n          | parse SyslogMessage with \"Accepted password for \" TargetUsername:string \" from \" SrcIpAddr:string \" port\" SrcPortNumber:int *\n          | extend\n              EventResult     = 'Success'\n              , EventSeverity = 'Informational'\n              , EventType     = 'Logon'\n              , EventCount    = int(1)\n          | project-away SyslogMessage, ProcessName\n  };\n  //\n  // -- Failed login - incorrect password\n  let SSHDFailed=(disabled:bool=false) {\n      // -- Parse events with the format Failed (password|none|publickey) for <User> from <IP address> port <port> ssh2[: RSA <cipher>:<key>]\"\n      // -- Or a number of such events message repeated <n> times: [ <message> ]\n      SyslogProjects | where not(disabled)\n          | where ProcessName == \"sshd\" and (\n              SyslogMessage startswith 'Failed' \n              or (SyslogMessage startswith 'message repeated' and SyslogMessage has 'Failed')\n          )\n          | invoke prefilter()\n          | parse SyslogMessage with * \"Failed \" * \" for \" TargetUsername:string \" from \" SrcIpAddr:string \" port\" SrcPortNumber:int *\n          | parse SyslogMessage with \"message repeated\" EventCount:int \" times:\" * \n          | extend\n          EventResult          = 'Failure'\n          , EventSeverity      = 'Low' \n          , EventType          = 'Logon'\n          , LogonMethod        = iff (SyslogMessage has 'publickey', 'PKI', 'Username & password')\n          , EventResultDetails = iff (SyslogMessage has 'publickey', 'Incorrect key', 'Incorrect password')\n          , EventCount         = toint(coalesce(EventCount,1))\n          | project-away SyslogMessage, ProcessName\n  };\n  //\n  // -- Logoff - Timeout\n  let SSHDTimeout=(disabled:bool=false) {\n      // -- Parse events with the format \"Timeout, client not responding from user yanivsh 131.107.174.198 port 7623\"\n      SyslogProjects | where not(disabled)\n          | where ProcessName == \"sshd\" and SyslogMessage startswith 'Timeout'\n          | invoke prefilter()\n          | parse-where SyslogMessage with * \"user \" TargetUsername:string \" \" SrcIpAddr:string \" port \" SrcPortNumber:int\n          | extend\n          EventSeverity    = 'Informational'\n          , EventType      = 'Logoff'\n          , EventResult    = 'Success'\n          , EventCount     = int(1)\n          | project-away SyslogMessage, ProcessName\n  };\n  //\n  // -- Failed login - invalid user\n  let SSHDInvalidUser=(disabled:bool=false) {\n      // -- Parse events with the format \"Invalid user [<User>] from <IP address> port <port>\"\n      SyslogProjects | where not(disabled)\n          | where ProcessName == \"sshd\" and SyslogMessage startswith 'Invalid user'\n          | invoke prefilter()\n          | parse SyslogMessage with \"Invalid user \" TargetUsername:string \" from \" SrcIpAddr:string \" port \" SrcPortNumber:int\n          | parse SyslogMessage with \"Invalid user  from \" SrcIpAddrNoUser:string \" port \" SrcPortNumberNoUser:int\n          | extend\n          EventResult             = 'Failure'\n          , EventSeverity         = 'Low'\n          , EventType             = 'Logon'\n          , EventResultDetails    = 'No such user'\n          , EventCount            = int(1)\n          , SrcIpAddr             = coalesce(SrcIpAddr, SrcIpAddrNoUser)\n          , SrcPortNumber         = coalesce(SrcPortNumber, SrcPortNumberNoUser)\n          | project-away SyslogMessage, ProcessName, SrcIpAddrNoUser, SrcPortNumberNoUser\n  };\n  //\n  // -- Blocked intrusion attempts\n  let SSHDABreakInAttemptMappingFailed=(disabled:bool=false) {\n      // -- Parse events with the format \"reverse mapping checking getaddrinfo for <host> [<Ip address>] failed - POSSIBLE BREAK-IN ATTEMPT!\"\n  SyslogProjects | where not(disabled)\n          | where ProcessName == \"sshd\" and SyslogMessage startswith \"reverse mapping checking getaddrinfo for\"\n          | invoke prefilter()\n          | parse SyslogMessage with * \" for \" Src \" [\" SrcIpAddr \"]\" *\n          | invoke _ASIM_ResolveSrcFQDN ('Src')\n          | extend\n              EventResult             = 'Failure'\n              , EventType             = 'Logon'\n              , DvcAction             = 'Block'\n              , TargetUsername        = ''\n              , EventSeverity         = 'Medium'\n              , EventCount            = int(1)\n              , EventResultDetails    = 'Logon violates policy'\n              , RuleName              = \"Reverse mapping failed\"\n          | extend\n              Rule = RuleName\n          | project-away SyslogMessage, ProcessName, Src\n  };\n  let SSHDABreakInAttemptMappingMismatch=(disabled:bool=false) {\n      // -- Parse events with the format \"Address 61.70.128.48 maps to host-61-70-128-48.static.kbtelecom.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!\"\n  SyslogProjects | where not(disabled)\n          | where ProcessName == \"sshd\" and SyslogMessage has \"but this does not map back to the address\"\n          | invoke prefilter()\n          | parse SyslogMessage with \"Address \" SrcIpAddr:string \" maps to \" Src:string \", but this\" *\n          | invoke _ASIM_ResolveSrcFQDN ('Src')\n          | extend\n              EventResult          = 'Failure'\n              , EventType          = 'Logon'\n              , DvcAction          = 'Block'\n              , TargetUsername     = ''\n              , EventSeverity      = 'Medium'\n              , EventCount         = int(1)\n              , EventResultDetails = 'Logon violates policy'\n              , RuleName = \"Address to host to address mapping does not map back to address\"\n          | extend\n              Rule = RuleName\n          | project-away SyslogMessage, ProcessName, Src\n  };\n  let SSHDABreakInAttemptNastyPtr=(disabled:bool=false) {\n      // -- Parse events with the format \"Nasty PTR record \"<RR>\" is set up for <IP Address>, ignoring\"\n  SyslogProjects | where not(disabled)\n          | where ProcessName == \"sshd\" and SyslogMessage startswith \"Nasty PTR record\"\n          | invoke prefilter()\n          | parse SyslogMessage with * \"set up for \" SrcIpAddr:string \", ignoring\"\n          | extend\n              EventResult          = 'Failure'\n              , EventType          = 'Logon'\n              , DvcAction          = 'Block'\n              , TargetUsername     = ''\n              , EventSeverity      = 'Medium'\n              , EventCount         = int(1)\n              , EventResultDetails = 'Logon violates policy'\n              , RuleName = \"Nasty PTR record set for IP Address\"\n          | extend\n              Rule = RuleName\n          | project-away SyslogMessage, ProcessName\n  };\n  union isfuzzy=false \n      SSHDAccepted (disabled=disabled)\n      , SSHDFailed (disabled=disabled)\n      , SSHDInvalidUser (disabled=disabled)\n      , SSHDTimeout (disabled=disabled)\n      , SSHDABreakInAttemptMappingFailed (disabled=disabled)\n      , SSHDABreakInAttemptMappingMismatch (disabled=disabled)\n      , SSHDABreakInAttemptNastyPtr (disabled=disabled)\n  | where targetusername_has=='*' or (TargetUsername has targetusername_has)\n  | invoke _ASIM_ResolveDvcFQDN ('Computer')\n  | extend \n      EventVendor             = 'OpenBSD'\n      , EventProduct          = 'OpenSSH'\n      , DvcOs                 = 'Linux'\n      , TargetDvcOs           = 'Linux'\n      , LogonProtocol         = 'ssh'\n      , TargetAppName         = 'sshd'\n      , TargetAppType         = 'Service'\n      , EventSubType          = 'Remote'\n      , EventSchema           = 'Authentication'\n      , EventSchemaVersion    = '0.1.2'\n      , EventStartTime        = TimeGenerated\n      , EventEndTime          = TimeGenerated\n      , TargetUsernameType    = 'Simple'\n      , DvcIdType             = iff (isnotempty(_ResourceId), \"AzureResourceId\", \"\")\n      , TargetAppId           = tostring(ProcessID)\n  | project-away Computer, ProcessID\n  | project-rename \n      EventUid                = _ItemId\n      , DvcScopeId            = _SubscriptionId\n      , DvcId                 = _ResourceId\n      , DvcIpAddr             = HostIP\n  //\n  // -- Aliases\n  | extend\n      User                    = TargetUsername\n      , Dvc                   = DvcHostname\n      , Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr)\n      , TargetDomain          = DvcDomain\n      , TargetFQDN            = DvcFQDN\n      , TargetDomainType      = DvcDomainType\n      , TargetHostname        = DvcHostname\n      , TargetDvcId           = DvcId\n      , TargetDvcScopeId      = DvcScopeId\n      , TargetDvcIdType       = DvcDomainType\n      , IpAddr                = DvcIpAddr\n      , TargetIpAddr          = DvcIpAddr\n  };\n  parser (\n      disabled            = disabled,\n      starttime           = starttime, \n      endtime             = endtime,\n      targetusername_has  = targetusername_has\n  )",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),targetusername_has:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}