{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimRegistryEventMicrosoftWindowsEvent",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Registry Event ASIM parser for Microsoft Windows Events (registry creation event)",
            "category": "ASIM",
            "FunctionAlias": "vimRegistryEventMicrosoftWindowsEvent",
            "query": "let RegistryEvents=(){\n    let ASIM_GetAccountType = (sid:string) { \n        iif ( \n            sid in (\"S-1-0-0\",\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Simple\"\n            , \"Windows\"\n        )\n    };\n    let ASIM_ParseWindowsEvents = (WindowsEvent:(EventData:dynamic)) {\n        WindowsEvent\n        | extend ActorUsername = iif(isnotempty(EventData.SubjectDomainName), strcat(EventData.SubjectDomainName, @'\\', EventData.SubjectUserName), EventData.SubjectUserName)\n            , ActorDomainName = tostring(EventData.SubjectDomainName)\n            , ActorUserId = tostring(EventData.SubjectUserSid)\n            , ActorSessionId = tostring(EventData.SubjectLogonId)\n            , ActingProcessName = tostring(EventData.ProcessName)\n            , ActingProcessId = tostring(toint(tolong(EventData.ProcessId)))\n            , RegistryKey = iif(EventData.ObjectName startswith @\"\\REGISTRY\\MACHINE\", replace_string(tostring(EventData.ObjectName), @\"\\REGISTRY\\MACHINE\",\"HKEY_LOCAL_MACHINE\")\n                , replace_string(tostring(EventData.ObjectName), @\"\\REGISTRY\\USER\",\"HKEY_USERS\")\n            )\n    };\n    let ASIM_ParseSecurityEvents = (SecurityEvent:(SubjectDomainName:string,SubjectUserName:string,ProcessId:string,ObjectName:string,SubjectUserSid:string,SubjectLogonId:string,ProcessName:string)) {\n        SecurityEvent\n        | project-rename ActorUsername = SubjectUserName\n            , ActorUserId = SubjectUserSid\n            , ActorSessionId = SubjectLogonId\n            , ActingProcessName = ProcessName\n            , ActorDomainName = SubjectDomainName\n        | extend ActorUsername = iif(isnotempty(ActorDomainName), strcat(ActorDomainName, @'\\', ActorUsername), ActorUsername)\n            , ActingProcessId = tostring(toint(tolong(ProcessId)))\n            , RegistryKey = iif(ObjectName startswith @\"\\REGISTRY\\MACHINE\", replace_string(ObjectName, @\"\\REGISTRY\\MACHINE\",\"HKEY_LOCAL_MACHINE\")\n                , replace_string(ObjectName, @\"\\REGISTRY\\USER\",\"HKEY_USERS\")\n            )\n    };\n    let Event4663TypeLookup = datatable (AccessMask:string,EventType:string)\n    [\n        \"0x1\", \"RegistryValueRead\"\n        , \"0x10\", \"RegistryKeyNotify\"\n        , \"0x10000\", \"RegistryKeyDeleted\"\n        , \"0x2\", \"RegistryValueSet\"\n        , \"0x20000\", \"MetadataAccessed\"\n        , \"0x20006\", \"RegistryValueSet\"\n        , \"0x40000\", \"MetadataModified\"\n        , \"0x8\", \"RegistrySubkeyEnumerated\"\n    ];\n    let Event4567TypeLookup = datatable (EventOriginalSubType:string,EventType:string)\n    [\n        \"%%1904\", \"RegistryValueSet\"\n        , \"%%1905\", \"RegistryValueSet\"\n        , \"%%1906\", \"RegistryValueDeleted\"\n    ];\n    let RegistryType = datatable (TypeCode:string,TypeName:string)\n    [\n        \"%%1872\", \"REG_NONE\"\n        , \"%%1873\",\t\"REG_SZ\"\n        , \"%%1874\", \"REG_EXPAND_SZ\"\n        , \"%%1875\", \"REG_BINARY\"\n        , \"%%1876\", \"REG_DWORD\"\n        , \"%%1879\", \"REG_MULTI_SZ\"\n        , \"%%1883\", \"REG_QWORD\"\n    ];\n    union isfuzzy=false (\n        WindowsEvent\n        | where EventID == 4663\n            and EventData.ObjectType == \"Key\"\n        | extend AccessMask = tostring(EventData.AccessMask)\n            , Type = \"WindowsEvent\"\n        | lookup Event4663TypeLookup on AccessMask\n        | invoke ASIM_ParseWindowsEvents()\n        | project TimeGenerated, Computer, EventID, EventType, ActorUsername, ActorDomainName, ActorUserId, ActorSessionId, ActingProcessName, ActingProcessId, RegistryKey, _ResourceId, Type\n    ), (\n        SecurityEvent\n        | where EventID == 4663\n            and ObjectType == \"Key\"\n        | lookup Event4663TypeLookup on AccessMask\n        | invoke ASIM_ParseSecurityEvents()\n        | project TimeGenerated, Computer, EventID, EventType, ActorUsername, ActorDomainName, ActorUserId, ActorSessionId, ActingProcessName, ActingProcessId, RegistryKey, _ResourceId, Type\n    ), (\n        union isfuzzy=false (\n            WindowsEvent\n            | where EventID == 4657\n            | invoke ASIM_ParseWindowsEvents()\n            | extend EventOriginalSubType = tostring(EventData.OperationType)\n                , OldValue = tostring(EventData.OldValue)\n                , NewValue = tostring(EventData.NewValue)\n                , RegistryValue = tostring(EventData.ObjectValueName)\n                , NewValueType = tostring(EventData.NewValueType)\n                , OldValueType = tostring(EventData.OldValueType)\n            | lookup Event4567TypeLookup on EventOriginalSubType\n            | project TimeGenerated, Computer, EventID, EventType, ActorUsername, ActorDomainName, ActorUserId, ActorSessionId, ActingProcessName, ActingProcessId, RegistryKey, _ResourceId, RegistryValue, Type, NewValueType, OldValueType, EventOriginalSubType, OldValue, NewValue\n        ), (\n            SecurityEvent\n            | where EventID == 4657\n            | invoke ASIM_ParseSecurityEvents()\n            | extend EventOriginalSubType = OperationType\n                , RegistryValue = ObjectValueName\n            | lookup Event4567TypeLookup on EventOriginalSubType\n            | project TimeGenerated, Computer, EventID, EventType, ActorUsername, ActorDomainName, ActorUserId, ActorSessionId, ActingProcessName, ActingProcessId, RegistryKey, _ResourceId, Type, NewValueType, OldValueType, EventOriginalSubType, OldValue, NewValue, RegistryValue\n        )\n        | lookup RegistryType on $left.NewValueType == $right.TypeCode | project-rename RegistryValueType = TypeName\n        | lookup RegistryType on $left.OldValueType == $right.TypeCode | project-rename RegistryPreviousValueType = TypeName\n        | extend RegistryValueData = iff (EventOriginalSubType == \"%%1906\", OldValue, NewValue)\n            , RegistryPreviousKey = iff (EventOriginalSubType == \"%%1905\", RegistryKey, \"\")\n            , RegistryPreviousValue = iff (EventOriginalSubType == \"%%1905\", RegistryValue, \"\")\n            , RegistryPreviousValueData = iff (EventOriginalSubType == \"%%1905\", OldValue, \"\")\n        | project-away NewValueType, OldValueType, EventOriginalSubType, OldValue, NewValue, RegistryValue\n    )\n    | invoke _ASIM_ResolveFQDN (\"Computer\")\n    | extend\n         ActorUserIdType = iff (ActorUserId <> \"S-1-0-0\", \"SID\", \"\"),\n         ActorUserId = iff (ActorUserId <> \"S-1-0-0\", ActorUserId, \"\")\n    | project-rename DvcDomainType = DomainType\n        , DvcHostname = ExtractedHostname\n    | extend DvcFQDN = iif(DvcDomainType == \"FQDN\", FQDN, \"\")\n        , DvcDomain = iif(isnotempty(Domain), Domain, \"\")\n        , Dvc = iif(DvcDomainType == \"FQDN\", FQDN, \"DvcHostname\")\n    | extend ActorUserType = _ASIM_GetWindowsUserType(ActorUsername, ActorUserId)\n        , ActorUsernameType = ASIM_GetAccountType(ActorUserId)\n    | extend EventType = iif(isempty(EventType), \"Other\",EventType)\n    | extend User = ActorUsername\n        , UserId = ActorUserId\n        , ActorUserSid = ActorUserId\n        , Process = ActingProcessName\n        , Dvc = iif(DvcDomainType == \"FQDN\", Computer, \"\")\n        , EventStartTime = TimeGenerated\n        , EventEndTime = TimeGenerated\n        , EventOriginalType = tostring(EventID)\n    | extend EventSchemaVersion = \"0.1\" \n        , EventSchema = \"RegistryEvent\"\n        , EventCount = toint(1)\n        , EventResult = \"Success\"\n        , EventVendor = \"Microsoft\"\n        , EventProduct = \"Security Events\" \n        , DvcOs = \"Windows\"\n}; RegistryEvents",
            "version": 1
          }
        }
      ]
    }
  ]
}